import heapq

def prim(graph):
	V=len(graph)  
	parent=[-1]*V
	key=[float('inf')]*V
	mstSet=[False]*V
	minHeap=[(0,0)]
	key[0]=0
	
	while minHeap:
		u_key,u=heapq.heappop(minHeap)
		mstSet[u]=True
		
		
		for v in range(V):
			if graph[u][v] and not mstSet[v] and graph[u][v]< key[v]:
				parent[v]=u
				key[v]=graph[u][v]
				heapq.heappush(minHeap,(key[v],v))
				
				
	print("Minimum Spanning TRee:")
	for i in range(1,V):
		print(parent[i],"-",i,"\t",graph[u][v][parent[i]])	
		
if __name__=="__main__":
	V=int(input("Enter the number of vertices: "))
	print("Enter the adjacency matrix:")
	graph=[list(map(int,input().split()))for _ in range(V)]
	prim(graph)		
				 
	

